/*-------------------------------------------------------------------------*
 * GNU Prolog                                                              *
 *                                                                         *
 * Part  : FD constraint solver buit-in predicates                         *
 * File  : fd_symbolic_fd.fd                                               *
 * Descr.: symbolic constraints management - FD part                       *
 * Author: Daniel Diaz                                                     *
 *                                                                         *
 * Copyright (C) 1999-2004 Daniel Diaz                                     *
 *                                                                         *
 * GNU Prolog is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published by the   *
 * Free Software Foundation; either version 2, or any later version.       *
 *                                                                         *
 * GNU Prolog is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of              *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU        *
 * General Public License for more details.                                *
 *                                                                         *
 * You should have received a copy of the GNU General Public License along *
 * with this program; if not, write to the Free Software Foundation, Inc.  *
 * 59 Temple Place - Suite 330, Boston, MA 02111, USA.                     *
 *-------------------------------------------------------------------------*/

/* $Id$ */

%{
Bool Fd_Element_V_To_Xi(int i,WamWord *array,Range *v);
Bool Fd_Atmost(int n,WamWord *array,int v);
Bool Fd_Atleast(int n,WamWord *array,int v);
Bool Fd_Exactly(int n,WamWord *array,int v);
%}



fd_element(fdv I,l_int L,fdv V)

{
 start I in Fd_Element_I(L)
 start V in Fd_Element_I_To_V(dom(I),L)
 start I in Fd_Element_V_To_I(dom(V),L)
}




fd_element_var(fdv I,l_fdv L,fdv V)

{
 start I in Fd_Element_Var_I(L)
 start V in Fd_Element_Var_I_To_V(dom(I),L) trigger also on dom(L)
 start I in Fd_Element_Var_V_To_I(dom(V),L) trigger also on dom(L)
 start Fd_Element_V_To_Xi(val(I),L,dom(V))
}




fd_atmost(int N,l_fdv L,int V)

{
 start Fd_Atmost(N,L,V) trigger on dom(L) always
}




fd_atleast(int N,l_fdv L,int V)

{
 start Fd_Atleast(N,L,V) trigger on dom(L) always
}




fd_exactly(int N,l_fdv L,int V)

{
 start Fd_Exactly(N,L,V) trigger on dom(L) always
}




